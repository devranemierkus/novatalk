<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <title>NovaTalk - Akıllı Sesli & Görüntülü Asistan</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      text-align: center;
      padding: 30px;
      background: linear-gradient(135deg, #e0f7fa 0%, #bbdefb 100%); /* Hafif mavi gradient */
      color: #333;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      margin: 0;
    }
    h1 {
      color: #0d47a1; /* Koyu mavi başlık */
      margin-bottom: 25px;
      font-size: 2.5em;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    div {
      margin-bottom: 15px;
    }
    button {
      font-size: 1.1em;
      padding: 14px 30px;
      margin: 10px;
      border-radius: 25px; /* Daha yuvarlak butonlar */
      border: none;
      background-color: #26a69a; /* Turkuaz tonu */
      color: white;
      cursor: pointer;
      min-width: 180px;
      transition: background-color 0.3s ease, transform 0.1s ease;
      user-select: none;
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      letter-spacing: 0.5px;
    }
    button:hover {
      background-color: #00897b; /* Daha koyu turkuaz */
      transform: translateY(-2px); /* Hafif yukarı kalkma efekti */
    }
    button:active {
      transform: translateY(0); /* Basıldığında eski yerine dönme */
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    button.stop {
      background-color: #ef5350; /* Kırmızı tonu */
    }
    button.stop:hover {
      background-color: #e53935; /* Daha koyu kırmızı */
    }
    button:disabled {
      background-color: #bdbdbd; /* Gri ve pasif görünüm */
      cursor: not-allowed;
      box-shadow: none;
      transform: none;
    }
    video {
      margin-top: 25px;
      max-width: 400px; /* Daha geniş video alanı */
      width: 90%;
      border-radius: 15px;
      box-shadow: 0 8px 16px rgba(0,0,0,0.3);
      display: none;
      background-color: #000; /* Video alanı boşken siyah zemin */
      border: 4px solid #42a5f5; /* Mavi çerçeve */
    }
    #status {
      margin-top: 25px;
      font-size: 1.1em;
      color: #1a237e; /* Koyu lacivert */
      font-weight: bold;
      min-height: 25px;
    }
    #log {
      margin-top: 20px;
      max-width: 400px;
      width: 90%;
      margin-left: auto;
      margin-right: auto;
      background: #ffffff; /* Beyaz log kutusu */
      padding: 15px;
      border-radius: 10px;
      font-size: 0.95em;
      white-space: pre-wrap;
      min-height: 100px; /* Daha geniş log alanı */
      color: #212121; /* Koyu gri metin */
      border: 1px solid #90caf9; /* Açık mavi çerçeve */
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      overflow-y: auto;
      max-height: 200px; /* Daha yüksek log alanı */
      text-align: left;
      line-height: 1.4;
    }
  </style>
</head>
<body>

  <h1>NovaTalk 🚀</h1>

  <div>
    <button id="btnAudioStart">🎤 Sesli Asistanı Başlat</button>
    <button id="btnAudioStop" class="stop" disabled>⏹️ Sesli Asistanı Durdur</button>
  </div>
  <div>
    <button id="btnVideoStart">📹 Görüntülü Konuşma Başlat</button>
    <button id="btnVideoStop" class="stop" disabled>⏹️ Görüntülü Konuşmayı Durdur</button>
  </div>

  <video id="video" autoplay playsinline></video>

  <div id="status"></div>
  <div id="log">Konuşma logu buraya gelecek...</div>

  <script>
    const btnAudioStart = document.getElementById('btnAudioStart');
    const btnAudioStop = document.getElementById('btnAudioStop');
    const btnVideoStart = document.getElementById('btnVideoStart');
    const btnVideoStop = document.getElementById('btnVideoStop');
    const video = document.getElementById('video');
    const statusDiv = document.getElementById('status'); // 'status' kelimesi JS'de çakışabilir, div olarak değiştirdim
    const logDiv = document.getElementById('log');

    let recognition = null;
    let audioStream = null;
    let videoStream = null;
    let isListening = false; // SpeechRecognition'ın manuel olarak mı, yoksa otomatik mi yeniden başlatıldığını kontrol eder.

    // Loglama fonksiyonu: Mesajları hem HTML'e hem de konsola yazdırır
    function appendToLog(message) {
      if (logDiv) {
        const now = new Date();
        const time = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
        logDiv.textContent += `\n[${time}] ${message}`;
        logDiv.scrollTop = logDiv.scrollHeight; // Kaydırma çubuğunu aşağı indir
      }
      console.log(`[LOG]: ${message}`); // Her zaman konsola da yaz
    }

    // Durum mesajlarını güncelleyen fonksiyon
    function updateStatus(message) {
        if (statusDiv) {
            statusDiv.textContent = message;
        }
        appendToLog(`DURUM: ${message}`);
    }

    // Botun sesli yanıt vermesini sağlayan fonksiyon
    function botSpeak(text) {
      if (speechSynthesis.speaking) {
        speechSynthesis.cancel();
      }
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'tr-TR';
      utterance.pitch = 1; // Ses perdesi (pitch) ayarı
      utterance.rate = 1;  // Konuşma hızı ayarı
      utterance.volume = 1; // Ses yüksekliği (volume) ayarı
      utterance.onend = () => {
        appendToLog("Bot konuşması bitti.");
        // Bot konuşması bittikten sonra tekrar dinlemeye devam et
        if (isListening && recognition && recognition.start) {
            try {
                recognition.start();
                updateStatus('Dinlemeye devam ediyorum...');
            } catch (e) {
                appendToLog(`Bot konuşması sonrası dinleme başlatılırken hata: ${e.message}`);
                console.error("Recognition re-start after botSpeak error:", e);
                updateStatus('Dinleme hatası oluştu.');
                isListening = false;
                stopRecognition();
            }
        }
      };
      utterance.onerror = (event) => {
        appendToLog(`Bot konuşma hatası: ${event.error}`);
        console.error("SpeechSynthesis error:", event.error);
        updateStatus('Bot konuşurken hata oluştu.');
      };
      speechSynthesis.speak(utterance);
      appendToLog(`NovaTalk söyledi: ${text}`);
    }

    // Ses tanımayı başlatan fonksiyon
    function startRecognition() {
      // Tarayıcı uyumluluk kontrolü
      if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        updateStatus('Tarayıcınız ses tanımayı desteklemiyor! Lütfen Chrome gibi destekleyen bir tarayıcı kullanın.');
        appendToLog('Hata: Tarayıcı ses tanımayı desteklemiyor.');
        alert('Tarayıcınız ses tanımayı desteklemiyor! Lütfen Chrome gibi destekleyen bir tarayıcı kullanın.');
        return;
      }

      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition = new SpeechRecognition();
      recognition.lang = 'tr-TR';
      recognition.interimResults = false; // Ara sonuçları değil, sadece kesin sonuçları döndür
      recognition.maxAlternatives = 1; // En iyi tahmini döndür
      recognition.continuous = false; // Konuşma durduktan sonra otomatik olarak durdur

      recognition.onstart = () => {
        updateStatus('Konuşmanı dinliyorum... Mikrofonun açık.');
        appendToLog('Ses tanıma başlatıldı. Dinleniyor...');
        isListening = true; // Dinleme durumunu aktif et
      };

      recognition.onresult = (event) => {
        const text = event.results[0][0].transcript.toLowerCase();
        appendToLog('Sen söyledin: "' + text + '"');
        updateStatus('Anladım: ' + text);
        botReply(text); // Botun yanıt vermesi
      };

      recognition.onerror = (event) => {
        updateStatus('Hata: ' + event.error);
        appendToLog(`Ses tanıma hatası: ${event.error}. Detay: ${event.message || 'Bilinmiyor.'}`);
        console.error("SpeechRecognition error:", event.error);

        if (event.error === 'not-allowed') {
          appendToLog('Mikrofon erişimi reddedildi. Lütfen tarayıcı ayarlarınızdan izin verin.');
          updateStatus('Mikrofon izni reddedildi. Sayfayı yenileyip tekrar deneyin.');
        } else if (event.error === 'no-speech') {
          appendToLog('Konuşma algılanmadı. Lütfen daha net ve yakın konuşun.');
          updateStatus('Konuşma algılanmadı. Tekrar deniyorum...');
          // Küçük bir gecikmeyle yeniden başlatmayı dene
          if(isListening) {
              setTimeout(() => {
                  try {
                      recognition.start();
                  } catch (e) {
                      appendToLog(`'no-speech' sonrası tekrar başlatılırken hata: ${e.message}`);
                      console.error("Recognition restart after no-speech error:", e);
                  }
              }, 500); // 0.5 saniye sonra tekrar dene
          }
        } else if (event.error === 'audio-capture') {
          appendToLog('Mikrofon şu anda kullanılamıyor veya başka bir uygulama tarafından kullanılıyor.');
          updateStatus('Mikrofon hatası. Başka bir uygulama kullanıyor olabilir.');
        } else if (event.error === 'network') {
          appendToLog('Ağ bağlantı hatası. İnternet bağlantınızı kontrol edin.');
          updateStatus('Ağ hatası. Bağlantınızı kontrol edin.');
        } else if (event.error === 'aborted') {
            appendToLog('Ses tanıma işlemi iptal edildi.');
            // Bu hata stopAll() çağrıldığında doğal olarak oluşabilir.
            // Bu yüzden isListening false ise tekrar başlatmaya çalışma.
        }
        
        if (isListening && !['no-speech', 'aborted'].includes(event.error)) { // no-speech dışındaki hatalarda durdur
             isListening = false;
             stopRecognition(); // Kalıcı olarak durdur
        }
      };

      recognition.onend = () => {
        appendToLog('Ses tanıma sona erdi.');
        if(isListening) { // Eğer isListening hala true ise, otomatik tekrar başlat
          appendToLog('Otomatik tekrar dinleme başlatılıyor...');
          try {
            recognition.start(); // Otomatik tekrar başlat
            updateStatus('Dinlemeye devam ediliyor...');
          } catch (e) {
            appendToLog(`Tekrar başlatılırken hata: ${e.message}`);
            console.error("Recognition re-start error:", e);
            updateStatus('Dinleme hatası oluştu. Lütfen tekrar başlatın.');
            isListening = false;
            stopRecognition(); // Hata durumunda tekrar denemeyi durdur
          }
        } else {
          updateStatus('Ses tanıma durdu.');
          appendToLog('Ses tanıma kalıcı olarak durduruldu.');
        }
      };

      try {
        recognition.start();
      } catch (e) {
        appendToLog(`Ses tanıma başlatılırken genel hata oluştu: ${e.message}`);
        console.error("Recognition start initial error:", e);
        updateStatus('Ses tanıma başlatılamadı. Lütfen tekrar deneyin.');
        isListening = false;
      }
    }

    // Botun kullanıcının söylediklerine verdiği yanıtlar (Konuşma Mantığı)
    function botReply(text) {
      let replyText = '';
      const now = new Date();

      if (text.includes('merhaba') || text.includes('selam')) {
        replyText = 'Merhaba! NovaTalk hizmetinizdeyim. Size nasıl yardımcı olabilirim?';
      } else if (text.includes('nasılsın')) {
        replyText = 'Ben bir yapay zekayım, iyiyim teşekkür ederim. Siz nasılsınız?';
      } else if (text.includes('adın ne') || text.includes('kimsin')) {
        replyText = 'Ben NovaTalk, dijital asistanınızım.';
      } else if (text.includes('saat kaç') || text.includes('saati söyle')) {
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        replyText = `Şu an saat ${hours}:${minutes}.`;
      } else if (text.includes('bugün günlerden ne') || text.includes('tarih ne')) {
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        replyText = `Bugün ${now.toLocaleDateString('tr-TR', options)}.`;
      } else if (text.includes('hava durumu')) {
        // BURAYA GERÇEK BİR HAVA DURUMU API ENTEGRASYONU YAPILABİLİR
        replyText = 'Üzgünüm, şu an için hava durumu bilgisi veremiyorum. Bu özellik geliştirme aşamasında.';
      } else if (text.includes('yardım et') || text.includes('ne yapabilirsin')) {
        replyText = 'Size saati söyleyebilir, günün tarihini belirtebilir veya sadece sohbet edebilirim. Ne sormak istersiniz?';
      } else if (text.includes('güle güle') || text.includes('görüşürüz') || text.includes('kapat') || text.includes('bitir')) {
        replyText = 'Görüşmek üzere! Kendinize iyi bakın.';
        setTimeout(() => stopAll(), 1500); // Bot konuşmayı bitirdikten sonra kapat
      } else {
        const randomReplies = [
          'Üzgünüm, dediğinizi tam anlayamadım. Tekrar söyler misiniz?',
          'Lütfen daha net konuşur musunuz?',
          'Kusura bakmayın, anlayamadım. Ne demek istediniz?',
          'Tekrar edebilir misiniz?'
        ];
        replyText = randomReplies[Math.floor(Math.random() * randomReplies.length)];
      }
      botSpeak(replyText);
    }

    // Ses tanımayı durduran fonksiyon
    function stopRecognition() {
      if(recognition) {
        isListening = false; // Dinlemeyi tamamen kapat
        recognition.stop();
        appendToLog('Ses tanıma durdurma komutu gönderildi.');
      }
      recognition = null; // Recognition objesini sıfırla
    }

    // Kamera ve mikrofon akışlarını durduran fonksiyon
    function stopStreams() {
      if(audioStream) {
        audioStream.getTracks().forEach(t => t.stop());
        audioStream = null;
        appendToLog('Ses akışı durduruldu.');
      }
      if(videoStream) {
        videoStream.getTracks().forEach(t => t.stop());
        videoStream = null;
        video.srcObject = null;
        appendToLog('Video akışı durduruldu.');
      }
      video.style.display = 'none';
    }

    // Tüm aktif işlemleri durduran ana fonksiyon
    function stopAll() {
      appendToLog('Tüm konuşma ve akışlar sonlandırılıyor...');
      stopRecognition();
      stopStreams();
      updateStatus('Konuşma sonlandırıldı. Tekrar başlatmak için düğmelere tıklayın.');
      appendToLog('NovaTalk tamamen sonlandırıldı.');

      // Buton durumlarını başlangıç haline getir
      btnAudioStart.disabled = false;
      btnAudioStop.disabled = true;
      btnVideoStart.disabled = false;
      btnVideoStop.disabled = true;
    }

    // Sayfa yüklendiğinde başlangıç log mesajını ve durumu göster
    appendToLog("NovaTalk hazır. Lütfen 'Sesli Asistanı Başlat' veya 'Görüntülü Konuşma Başlat' düğmelerinden birine tıklayın.");
    updateStatus("Hoş geldiniz! Başlamak için bir seçenek seçin.");


    // Sesli Konuşma Başlat düğmesine tıklama olayı
    btnAudioStart.onclick = () => {
      stopAll(); // Önceki tüm işlemleri durdur
      appendToLog('Sesli asistan başlatma isteği.');
      updateStatus('Mikrofon izni bekleniyor...');

      navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
          audioStream = stream;
          video.style.display = 'none';
          updateStatus('Mikrofon izni verildi. Dinliyorum...');
          appendToLog('Mikrofon izni başarıyla alındı. Ses tanıma başlatılıyor.');

          btnAudioStart.disabled = true;
          btnAudioStop.disabled = false;
          btnVideoStart.disabled = true;
          btnVideoStop.disabled = true;

          startRecognition(); // Ses tanımayı başlat
        })
        .catch(err => {
          updateStatus('Mikrofon izni reddedildi: ' + err.message);
          appendToLog('Hata: Mikrofon izni reddedildi veya erişilemiyor. Detay: ' + err.name + " - " + err.message);
          console.error("getUserMedia (audio) error:", err);
          stopAll(); // Hata durumunda her şeyi sıfırla
          alert('Mikrofon izni reddedildi veya mikrofon kullanılamıyor. Lütfen tarayıcı ayarlarınızı kontrol edin ve tekrar deneyin.');
        });
    };

    // Sesli Konuşmayı Durdur düğmesine tıklama olayı
    btnAudioStop.onclick = () => {
      stopAll();
      appendToLog('Sesli asistan durduruldu.');
    };

    // Görüntülü Konuşma Başlat düğmesine tıklama olayı
    btnVideoStart.onclick = () => {
      stopAll(); // Önceki tüm işlemleri durdur
      appendToLog('Görüntülü konuşma başlatma isteği.');
      updateStatus('Kamera ve mikrofon izni bekleniyor...');

      navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
          videoStream = stream;
          video.srcObject = stream;
          video.style.display = 'block';
          updateStatus('Kamera ve mikrofon izni verildi. Dinliyorum...');
          appendToLog('Kamera ve mikrofon izni başarıyla alındı. Ses tanıma başlatılıyor.');

          btnVideoStart.disabled = true;
          btnVideoStop.disabled = false;
          btnAudioStart.disabled = true;
          btnAudioStop.disabled = true;

          startRecognition(); // Ses tanımayı başlat
        })
        .catch(err => {
          updateStatus('Kamera veya mikrofon izni reddedildi: ' + err.message);
          appendToLog('Hata: Kamera veya mikrofon izni reddedildi veya erişilemiyor. Detay: ' + err.name + " - " + err.message);
          console.error("getUserMedia (video+audio) error:", err);
          stopAll(); // Hata durumunda her şeyi sıfırla
          alert('Kamera veya mikrofon izni reddedildi veya kullanılamıyor. Lütfen tarayıcı ayarlarınızı kontrol edin ve tekrar deneyin.');
        });
    };

    // Görüntülü Konuşmayı Durdur düğmesine tıklama olayı
    btnVideoStop.onclick = () => {
      stopAll();
      appendToLog('Görüntülü konuşma durduruldu.');
    };
  </script>

</body>
</html>
